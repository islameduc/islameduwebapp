{"version":3,"file":"static/js/9049.077e9e29.chunk.js","mappings":"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","sources":["webpack://client/./src/components/admin/settings-sidebar/SettingsSidebar.module.css?d77a","components/admin/settings-sidebar/SettingsSidebar.component.tsx","webpack://client/./src/components/admin/settings-mobile-navs/SettingsMobileNavs.module.css?b856","components/admin/settings-mobile-navs/SettingsMobileNavs.component.tsx","layouts/Settings.layout.tsx","webpack://client/./src/pages/admin/account/Account.module.css?e49d","pages/admin/account/Account.page.tsx"],"sourcesContent":["// extracted by mini-css-extract-plugin\nexport default {\"container\":\"SettingsSidebar_container__W+SU6\",\"activeItem\":\"SettingsSidebar_activeItem__LvAQF\"};","import React, { useState } from 'react';\nimport { useNavigate } from 'react-router-dom';\nimport { settingsSidebar } from '../../../assets/data/sidebar';\nimport SidebarItem from '../sidebar-item/SidebarItem.component';\nimport classes from './SettingsSidebar.module.css';\n\ninterface sidebarProps {\n  width?: string;\n}\n\nconst SettingsSidebar = ({ width }: sidebarProps) => {\n  const [active, setActive] = useState<string>('General');\n  const navigate = useNavigate();\n  return (\n    <div className={classes.container} style={{ width }}>\n      <div>\n        {settingsSidebar.map((item: any) => (\n          <SidebarItem\n            key={item.id}\n            text={item.title}\n            to={item.path}\n            activeClassName={classes.activeItem}\n            style={{\n              backgroundColor: 'white',\n              borderRadius: ' 25px',\n              display: 'flex',\n              justifyContent: 'center',\n              marginBottom: '18px',\n              padding: '8px 10px',\n              fontWeight: '600',\n            }}\n            fontSize='12px'\n          />\n        ))}\n      </div>\n    </div>\n  );\n};\n\nexport default SettingsSidebar;\n","// extracted by mini-css-extract-plugin\nexport default {\"container\":\"SettingsMobileNavs_container__u56mH\",\"icon\":\"SettingsMobileNavs_icon__yNUQz\"};","import React, { useState } from 'react';\nimport { useNavigate } from 'react-router-dom';\nimport SidebarItem from '../sidebar-item/SidebarItem.component';\nimport { settingsSidebar, sidebar } from '../../../assets/data/sidebar';\nimport classes from './SettingsMobileNavs.module.css';\n\ninterface sidebarProps {\n  showSidebar?: boolean;\n  onClick?: () => void;\n}\n\nconst SettingsMobileNavs = ({ showSidebar, onClick }: sidebarProps) => {\n  const [active, setActive] = useState<string>('');\n  const navigate = useNavigate();\n  return (\n    <>\n      {showSidebar && (\n        <div className={classes.container}>\n          {settingsSidebar.map((item: any) => (\n            <SidebarItem\n              key={item.id}\n              text={item.title}\n              activeClassName={classes.activeItem}\n              style={{\n                backgroundColor: 'white',\n                borderRadius: ' 25px',\n                display: 'flex',\n                marginBottom: '18px',\n                padding: '6px 8px',\n                fontWeight: '600',\n                fontSize: '16px',\n              }}\n              renderIcon={() => (\n                <div className={classes.icon}>\n                  <item.icon color={item.title === active ? '#00262a' : '#929283'} size='24' />\n                </div>\n              )}\n              to={item.path}\n              onClick={onClick}\n            />\n          ))}\n        </div>\n      )}\n    </>\n  );\n};\n\nexport default SettingsMobileNavs;\n","import React, { useState } from 'react';\nimport SettingsSidebar from '../components/admin/settings-sidebar/SettingsSidebar.component';\nimport AdminLayout from './Admin.layout';\nimport { LayoutTypes } from './Layout.type';\nimport SettingsMobileNavs from '../components/admin/settings-mobile-navs/SettingsMobileNavs.component';\nimport classes from './Layout.module.css';\n\nconst SettingsLayout = ({ children, padding = '', inlineWidth = '' }: LayoutTypes) => {\n  const [showSidebar, setShowSidebar] = useState(false);\n  return (\n    <AdminLayout title='Settings' childBackground='#fff' bgColor='#fff'>\n      <div className={classes.container}>\n        <div className={classes.sidebar}>\n          <SettingsSidebar />\n        </div>\n        <div className={classes.content} style={{ padding }}>\n          <div className={classes.childrenContent} style={{ width: inlineWidth }}>\n            {children}\n          </div>\n        </div>\n      </div>\n      <div className={classes.mobileNavs}>\n        <SettingsMobileNavs showSidebar={showSidebar} onClick={() => setShowSidebar(false)} />\n      </div>\n    </AdminLayout>\n  );\n};\n\nexport default SettingsLayout;\n","// extracted by mini-css-extract-plugin\nexport default {\"container\":\"Account_container__oT-HP\",\"password\":\"Account_password__ciL0A\",\"emailText\":\"Account_emailText__m8JIj\",\"save\":\"Account_save__0V+P0\",\"passwordHeading\":\"Account_passwordHeading__a2YRu\",\"passwords\":\"Account_passwords__-657z\",\"deleteAccount\":\"Account_deleteAccount__vqoSn\",\"headings\":\"Account_headings__kIvbb\",\"delete\":\"Account_delete__ytAeM\",\"passInputLeft\":\"Account_passInputLeft__wEz25\",\"passInputRight\":\"Account_passInputRight__PLMY1\"};","import React, { useState } from 'react';\nimport Button from '../../../components/admin/button/Button.component';\nimport Input from '../../../components/admin/input/Input.component';\nimport SettingsLayout from '../../../layouts/Settings.layout';\nimport classes from './Account.module.css';\nimport { useAppDispatch, useAppSelector } from '../../../store';\nimport { changePasswordAction } from '../../../store/features/slices/auth/auth.action';\nimport { toast } from 'react-toastify';\nimport { useNavigate } from 'react-router-dom';\nimport { paths } from '../../../routers/paths';\n\nconst Account = () => {\n  const { user } = useAppSelector((state) => state.auth);\n  const dispatch = useAppDispatch();\n  const [oldPassword, setOldPassword] = useState<string>('');\n  const [newPassword, setNewPassword] = useState<string>('');\n  const [loading, setLoading] = useState<boolean>(false);\n  const navigate = useNavigate();\n\n  const handlePasswordChange = () => {\n    if (!oldPassword || !newPassword) return toast.error('Please fill all the fields');\n    else if (oldPassword !== newPassword) return toast.error('Old and New Passwords are not same');\n    else {\n      setLoading(true);\n      const data = {\n        token: user.accessToken,\n        userData: {\n          oldPassword,\n          newPassword,\n        },\n      };\n      dispatch(changePasswordAction(data))\n        .then(() => {\n          toast.success('Password changed succesfully');\n          setLoading(false);\n        })\n        .catch((err) => toast.error(err.message));\n    }\n  };\n  return (\n    <SettingsLayout inlineWidth='90%'>\n      <div className={classes.container}>\n        <div className={classes.emailText}>\n          <h4 className={classes.headings}>Public Email</h4>\n          <span style={{ fontSize: '14px' }}>\n            Your Email is:{' '}\n            <span style={{ fontWeight: 'bold', marginLeft: '5px' }}>{user?.user.email}</span>\n          </span>\n        </div>\n        <div className={classes.passwordHeading}>\n          <h4 className={classes.headings}>Password</h4>\n          <span style={{ color: '#0555F0', fontSize: '13px', cursor: 'pointer' }}>Hide</span>\n        </div>\n        <div className={classes.passwords}>\n          <div className={classes.passInputLeft}>\n            <Input\n              label='Current Password'\n              placeholder='Enter Current Password'\n              padding='5px 8px'\n              borderRadius='8px'\n              labelStyle={{ textAlign: 'left' }}\n              margin='0 8px 0 0'\n              value={oldPassword}\n              onChange={(e) => setOldPassword(e.target.value)}\n            />\n          </div>\n          <div className={classes.passInputRight}>\n            <Input\n              label='New Password'\n              placeholder='Enter New Password'\n              padding='5px 8px'\n              labelStyle={{ textAlign: 'left' }}\n              value={newPassword}\n              onChange={(e) => setNewPassword(e.target.value)}\n            />\n          </div>\n        </div>\n        <div style={{ fontSize: '13px', display: 'flex' }}>\n          <div>Can’t remember your password?</div>\n          <div\n            style={{ color: '#0555F0', cursor: 'pointer', marginLeft: '10px' }}\n            onClick={() => navigate(paths.FORGOTPASSWORD)}\n          >\n            Reset your password\n          </div>\n        </div>\n        <div className={classes.save}>\n          <Button\n            text='Save Changes'\n            width='100%'\n            onClick={handlePasswordChange}\n            loading={loading}\n          />\n        </div>\n        <div className={classes.deleteAccount}>\n          <h4 className={classes.headings}>Delete Account</h4>\n          <p>\n            Would you like to delete your account? Deleting your account will remove all the content\n            associated with it!\n          </p>\n          <p className={classes.delete}>I want to delete my account</p>\n        </div>\n      </div>\n    </SettingsLayout>\n  );\n};\n\nexport default Account;\n"],"names":["_ref","width","active","setActive","useState","useNavigate","_jsx","className","classes","style","children","settingsSidebar","map","item","SidebarItem","text","title","to","path","activeClassName","backgroundColor","borderRadius","display","justifyContent","marginBottom","padding","fontWeight","fontSize","id","showSidebar","onClick","_Fragment","container","activeItem","renderIcon","icon","color","size","inlineWidth","setShowSidebar","_jsxs","AdminLayout","childBackground","bgColor","sidebar","SettingsSidebar","content","childrenContent","mobileNavs","SettingsMobileNavs","Account","user","useAppSelector","state","auth","dispatch","useAppDispatch","oldPassword","setOldPassword","newPassword","setNewPassword","loading","setLoading","navigate","SettingsLayout","marginLeft","email","cursor","Input","label","placeholder","labelStyle","textAlign","margin","value","onChange","e","target","paths","FORGOTPASSWORD","Button","handlePasswordChange","toast","error","data","token","accessToken","userData","changePasswordAction","then","success","catch","err","message"],"sourceRoot":""}